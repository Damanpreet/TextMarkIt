To run the flask app:

Unix system
export FLASK_APP=main.py
flask run

Windows system
set FLASK_APP=main.py
flask run

Debug mode
set FLASK_ENV=development

pip install flask
pip install flask-restful
pip install python-dotenv
pip install tensorflow
pip install tensorflow-hub

can be extended for text in other languages.
fasttext

if time permits:
collaborative filtering

also try: 
SIF Embeddings: https://towardsdatascience.com/fse-2b1ffa791cf9

LDA with tf-idf -https://towardsdatascience.com/topic-modeling-and-latent-dirichlet-allocation-in-python-9bf156893c24
https://www.youtube.com/watch?v=Cpt97BpI-t4
https://www.kaggle.com/ktattan/lda-and-document-similarity
https://towardsdatascience.com/unsupervised-nlp-topic-models-as-a-supervised-learning-input-cf8ee9e5cf28

main article:
https://medium.com/@adriensieg/text-similarities-da019229c894

check working with pdf:
https://www.geeksforgeeks.org/working-with-pdf-files-in-python/

web apis with python:
https://programminghistorian.org/en/lessons/creating-apis-with-python-and-flask#what-is-an-api

NLP+Flask:
https://towardsdatascience.com/develop-a-nlp-model-in-python-deploy-it-with-flask-step-by-step-744f3bdd7776

features:
collapse and uncollapse document feature.
upload from google drive
if the trained model does not work too well, give an option for the user to shift to tf-idf mode. or maybe analyze the length of the text and use the model accordingly.
also,try sentence2vec: https://github.com/peter3125/sentence2vec/blob/master/sentence2vec.py
Do a user study and ask the users to rate which algorithm performed better in their experience and make it the default algorithm.
define threshold based on their analysis. let them know what is the default threshold.
give an option for the user to save the highlighted text or pdf.
